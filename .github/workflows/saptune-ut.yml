name: Saptune Continuous Integration

# Controls when the workflow will run
on:
  # Triggers the workflow on pull request events but only for the master and sle-12 branch
  push:
    branches: [ master, saptune_test ]
  pull_request:
    branches: [ master ]

env:
  CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
  CC_PREFIX: github.com/SUSE/saptune/
  TARGET_BRANCH: 'cover'

jobs:
  Check_secrets:
    runs-on: ubuntu-latest
    outputs:
      run_cc: ${{ steps.run_cc.outputs.run_cc }}
    steps:
      - id: run_cc
        run: if [ -z ${CC_TEST_REPORTER_ID} ]; then echo "run_cc=false" >> "$GITHUB_OUTPUT"; else echo "run_cc=true" >> "$GITHUB_OUTPUT"; fi

  Setup_Git_Env:
    runs-on: ubuntu-latest
    needs: Check_secrets
    outputs:
      branch: ${{ steps.branch.outputs.GIT_BRANCH }}
      commit_sha: ${{ steps.commit_sha.outputs.GIT_COMMIT_SHA }}
    if: ${{ needs.Check_secrets.outputs.run_cc == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set ENV (push)
        run: |
          echo "GIT_BRANCH=${{ github.ref }}" >> $GITHUB_ENV
          echo "GIT_COMMIT_SHA=${{ github.sha }}" >> $GITHUB_ENV
        if: github.event_name == 'push'

      - name: Set ENV (pull_request)
        run: |
          git fetch --no-tags --prune --depth=1 origin +refs/heads/${{ github.base_ref }}:refs/remotes/origin/${{ github.head_ref }}
          echo "GIT_BRANCH=${{ github.head_ref }}" >> $GITHUB_ENV
          echo "GIT_COMMIT_SHA=$(git rev-parse origin/${{ github.head_ref }})" >> $GITHUB_ENV
        if: github.event_name == 'pull_request'

      - id: branch
        run: echo "GIT_BRANCH=${GIT_BRANCH}" >> "$GITHUB_OUTPUT"
          
      - id: commit_sha
        run: echo "GIT_COMMIT_SHA=${GIT_COMMIT_SHA}" >> "$GITHUB_OUTPUT"

  Saptune_unit_test:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v4

      - name: Pull the Container Image
        run: docker pull registry.opensuse.org/home/angelabriel/st-ci-base/containers/st-ci-base:latest

      - name: Run Container Image
        run: docker run --name saptune-ci --privileged --tmpfs /run -v /sys/fs/cgroup:/sys/fs/cgroup:rw --cgroupns=host -td -v "${{ github.workspace }}:/app" registry.opensuse.org/home/angelabriel/st-ci-base/containers/st-ci-base:latest

      - name: Get Container Logs
        run: docker logs saptune-ci

      - name: Run saptune unit tests
        run: docker exec -t saptune-ci /bin/sh -c "cd /app; ./run_saptune_ci_tst.sh;"
        continue-on-error: true

      - uses: actions/upload-artifact@v4
        with:
          name: coverprofile
          path: c.out
        if: ${{ env.CC_TEST_REPORTER_ID != '' }}

      - uses: actions/upload-artifact@v4
        with:
          name: coverfunctions
          path: cov.out
        if: ${{ env.CC_TEST_REPORTER_ID != '' }}

      - uses: actions/upload-artifact@v4
        with:
          name: coverhtml
          path: cov.html
        if: ${{ env.CC_TEST_REPORTER_ID != '' }}

      - name: Stop and remove Container Image
        run: |
          docker stop saptune-ci
          docker rm saptune-ci

  Coverage_report_and_badge:
    needs: [Setup_Git_Env, Saptune_unit_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: coverprofile

      - uses: actions/download-artifact@v4
        with:
          name: coverfunctions

      - uses: actions/download-artifact@v4
        with:
          name: coverhtml

      - name: create coverage list/table
        run: .github/scripts/cover.sh

      - uses: actions/upload-artifact@v4
        with:
          name: covtable
          path: coverage_table.md

      - name: create badge
        run: .github/scripts/badge.sh

      - uses: actions/upload-artifact@v4
        with:
          name: badge
          path: badge_cov.svg

  Store_reports_and_badge:
    needs: [Setup_Git_Env, Saptune_unit_test, Coverage_report_and_badge]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: checkout branch cover
        run: |
          #  ${{ secrets.GITHUB_TOKEN }}
          git fetch
          git checkout ${{ env.TARGET_BRANCH }}
          git status
          echo "release ${{ github.event.release.tag_name }}"
          echo "name ${{ github.event_name }}"
          echo "action ${{ github.event_action }}"
          echo "ref ${{ github.head_ref }} or ${{ github.ref_name }}"
          echo "sha ${{ github.sha }}"
          echo "repository ${{ github.repository }}"
          echo "PR repo fork? ${{ github.event.pull_request.head.repo.full_name }}"
          echo "feature branch ${{ github.event.pull_request.head.ref }}"
          echo "PR nummer ${{ github.event.pull_request.number }}"

      - uses: actions/download-artifact@v4
        with:
          name: badge

      - uses: actions/download-artifact@v4
        with:
          name: covtable

      - name: push new badge to branch cover, not on PR
        #env:
        #  GIT_BRANCH: ${{needs.Setup_Git_Env.outputs.branch}}
        #  GIT_COMMIT_SHA: ${{needs.Setup_Git_Env.outputs.commit_sha}}
        run: |
          #  ${{ secrets.GITHUB_TOKEN }}
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          ## debug # git status
          git add badge_cov.svg
          git add coverage_table.md
          ## debug # git status
          if $(git diff --quiet && git diff --staged --quiet)
          then
            echo "nothing changed"
          else
            git commit -m "update coverage badge and table"
            git push origin ${{ env.TARGET_BRANCH }}
          fi

